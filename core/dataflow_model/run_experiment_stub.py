#!/usr/bin/env python
r"""
Run a single DAG model wrapping

# Use example:
> run_notebook_stub.py \
    --dst_dir nlp/test_results \
    --experiment_builder "core.dataflow_model.master_experiment.run_experiment" \
    --config_builder "nlp.build_configs.build_PTask1088_configs()" \
    --num_threads 2
"""
import argparse
import logging

import core.config_builders as cfgb
import core.dataflow_model.master_experiment as mstpip
import helpers.dbg as dbg
import helpers.parser as prsr

_LOG = logging.getLogger(__name__)


def _parse() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
    )
    # Add notebook options.
    parser.add_argument(
        "--experiment_builder",
        action="store",
        required=True,
        help="E.g., 'core.dataflow_model.master_experiment.run_experiment'"
    )
    parser.add_argument(
        "--config_builder",
        action="store",
        required=True,
        help="E.g., 'nlp.build_configs.build_PTask1088_configs()'"
    )
    parser.add_argument(
        "--config_idx",
        action="store",
        required=True,
        help="Index of the config generated by config_builder to run"
    )
    parser.add_argument(
        "--dst_dir",
        action="store",
        required=True,
        help="Destination dir for the entire experiment set, not for this"
            " specific experiment",
    )
    parser = prsr.add_verbosity_arg(parser)
    return parser


def _main(parser: argparse.ArgumentParser) -> None:
    args = parser.parse_args()
    dbg.init_logger(verbosity=args.log_level)
    # TODO(gp): Generalize this allowing multiple experiments. This should reuse
    #  most of the logic or executing a config builder.
    dbg.dassert_eq(args.experiment_builder,
                   'core.dataflow_model.master_experiment.run_experiment')
    params = {
        "config_builder": args.config_builder,
        "dst_dir": args.dst_dir,
        "experiment_builder": args.experiment_builder,
    }
    config_idx = int(args.config_idx)
    config = cfgb.get_config_from_params(config_idx, params)
    _LOG.info("config=\n%s", config)
    mstpip.run_experiment(config)


if __name__ == "__main__":
    _main(_parse())
