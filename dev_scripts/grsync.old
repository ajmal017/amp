#!/usr/bin/env python

import argparse
import logging
import os
import sys

sys.path.append(os.path.dirname(os.path.abspath(__file__)) + "/..")

import helpers.dbg as dbg
import helpers.system_interaction as si

_log = logging.getLogger(__name__)

# Filter local, remote removing directory (first d or through rsync)
# Mount remote file system and then get info and sha1sum

# ##############################################################################


def _system(cmd, *args, **kwargs):
    print("> %s" % cmd)
    si.system(cmd, *args, **kwargs)

src_base = "."
dst_base = "/data/gp_wd/src/particle2"
#target = "edgar/form_8/Task802_lib.py"
#target = "edgar/form_8"
target = "./"
dst_ip = os.environ["AWS_MONSTER_IP"]


src_base = "."
dst_base = "/data/gp_wd/src/particle2"
#target = "edgar/form_8/Task802_lib.py"
#target = "edgar/form_8"
target = "."
dst_ip = os.environ["AWS_MONSTER_IP"]


def _list_files(reverse):
    cmd = 'rsync'
    # -a: archive
    # -v: verbose
    # -i: itemize info
    # -z: compress
    # -u: if different keep oldest
    # -P: --partial(restart from middle if transfer was interrupted) and --progress
    # --suffix.old: use a suffix to keep old
    cmd_opts = ""
    cmd_opts += " -i"
    cmd_opts += " -n -avzu"
    cmd_opts += " --exclude .git --exclude .idea --exclude .ipynb_checkpoints"
    cmd += cmd_opts
    if not reverse:
        cmd += " %s/%s" % (src_base, target)
    else:
        cmd += " %s:%s/%s" % (dst_ip, dst_base, target)
    cmd += " >" + ("local.txt" if not reverse else "remote.txt")
    return cmd


def _cmd(preview, execute, reverse):
    cmd = 'rsync'
    # -a: archive
    # -v: verbose
    # -i: itemize info
    # -z: compress
    # -u: if different keep oldest
    # -P: --partial(restart from middle if transfer was interrupted) and --progress
    # --suffix.old: use a suffix to keep old
    cmd_opts = ""
    if preview:
        #cmd_opts += " -i"
        cmd_opts += " --itemize-changes"
    if not execute:
        cmd_opts += " -n"
    cmd_opts += " -avzu"
    cmd_opts += " --exclude .git --exclude .idea --exclude .ipynb_checkpoints"
    cmd += cmd_opts
    if not reverse:
        cmd += " %s/%s %s:%s/%s/.." % (src_base, target, dst_ip, dst_base, target)
    else:
        cmd += " %s:%s/%s %s/%s/.." % (dst_ip, dst_base, target, src_base, target)
    return cmd


def _main(parser):
    args = parser.parse_args()
    dbg.init_logger(verb=args.log_level)
    #
    if True:
        execute = True
        cmd = _cmd(preview=True, execute=execute, reverse=False)
        _system(cmd, suppress_output=False)
        cmd = _cmd(preview=True, execute=execute, reverse=True)
        _system(cmd, suppress_output=False)
    cmd = _list_files(reverse=False)
    _system(cmd, suppress_output=False)
    cmd = _list_files(reverse=True)
    _system(cmd, suppress_output=False)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument(
        "-v",
        dest="log_level",
        default="INFO",
        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
        help="Set the logging level")
    _main(parser)
